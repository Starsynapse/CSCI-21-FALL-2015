Declare and implement a class that provides the following interface EXACTLY.
You will modify 2 files, sl_list.h and sl_list.cpp
You will also need to use your sl_node.h and sl_node.cpp from the previous exercises

Class Name: SLList

Private Members:
   
   void InsertHead(int)
  --creates a new dynamic SLNode with the contents of 
    the parameter and attaches as the new head of the list
    (*MODIFY*) - Moved from Public -> Private

  void InsertTail(int)
  --creates a new dynamic SLNode with the contents of 
    the parameter and attaches as the last node (tail) of the list
    (*MODIFY*) - Moved from Public -> Private
  
  void RemoveHead()
  --removes the head node from the list,
    or does nothing if the list is empty
    (*MODIFY*) - Moved from Public -> Private

  void RemoveTail()
  --removes the last node (tail) from the list,
    or does nothing if the list is empty
    (*MODIFY*) - Moved from Public -> Private

  SLNode* head_
  --points to the first node in a singly-linked list
  SLNode* tail_
  --points to the last node in a singly-linked list
  unsigned int size_
  --stores the count of the number of nodes in the list

Public Members:

  Default Constructor
  --sets head_ to NULL
  --sets tail_ to NULL
  --sets size_ to 0
  
  Destructor
  --calls Clear()
  
  void Insert(int) (*NEW*)
  --creates a new SLNode with the contents of the parameter and
    inserts it into the correct position in the list. The list
    will be sorted with the lowest values in the front (head) and the
    largest values in the back (tail).
  
  bool RemoveFirstOccurence(int) (*NEW*)
  --remove the first occurence of the supplied parameter
    found as the data of a node. Return true on successful
    removal or false if the list is empty or if the value
    is not found.
            
  int GetHead() const
  -- Returns the contents of the head node
     (The node head_ is pointing to)
     Returns 0 if the list is empty
   
  int GetTail() const
  -- Returns the contents of the tail node
     (The node tail_ is pointing to)
     Returns 0 if the list is empty

  void Clear()
  --clears the entire contents of the list,
    freeing all memory associated with all nodes
  
  unsigned int size() const
  --accessor for size_
  
  string ToString() const
  --returns a string representation of the contents
    of all nodes in the list, in the format
    NUM1, NUM2, ..., LASTNUM
    returns the empty string on an empty list (i.e. returns "")


